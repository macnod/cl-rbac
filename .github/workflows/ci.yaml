name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker image
        id: cache-docker
        uses: actions/cache@v4
        with:
          path: /tmp/postgres-image.tar
          key: ${{ runner.os }}-docker-postgres-16-${{ hashFiles('**/ci.yaml') }}
          restore-keys: |
            ${{ runner.os }}-docker-postgres-16-

      - name: Load cached Docker image
        if: steps.cache-docker.outputs.cache-hit == 'true'
        run: |
          docker load -i /tmp/postgres-image.tar
          echo "Loaded cached postgres:16 image"

      - name: Pull and save Docker image
        if: steps.cache-docker.outputs.cache-hit != 'true'
        run: |
          docker pull postgres:16
          docker save -o /tmp/postgres-image.tar postgres:16
          echo "Pulled and saved postgres:16 image"

      - name: Start PostgreSQL container
        run: |
          docker run -d --name pgtest \
            -p 5433:5432 \
            -e POSTGRES_USER="cl-user" \
            -e POSTGRES_PASSWORD="cl-user-password" \
            -e POSTGRES_DB="rbac" \
            -v "${{ github.workspace }}/src/init.sql:/docker-entrypoint-initdb.d/init.sql" \
            --health-cmd pg_isready \
            --health-interval 2s \
            --health-timeout 10s \
            --health-retries 10 \
            postgres:16

            # Wait for PostgreSQL to be healthy
            for i in {1..30}; do
              if docker inspect --format='{{ .State.Health.Status }}' pgtest | grep -q "healthy"; then
                echo "PostgreSQL is healthy"
                break
              fi
              echo "Waiting for PostgreSQL to be healthy..."
              sleep 2
            done

            # Fail if PostgreSQL never became healthy
            if ! docker inspect --format='{{ .State.Health.Status }}' pgtest | grep -q "healthy"; then
              echo "PostgreSQL failed to become healthy"
              docker logs pgtest
              exit 1
            fi

      - name: Cache system packages
        id: cache-apt
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: automake build-essential curl git gnupg libcurl4-openssl-dev zlib1g-dev
          version: 1.0

      - name: Set up PATH
        run: |
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Cache Roswell
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/bin/ros
            ~/.local/etc/roswell
            ~/.roswell
            ~/.cache
          key: ${{ runner.os }}-roswell-26

      - name: Verify Roswell paths
        run: |
          if command -v ros >/dev/null 2>&1; then
            echo "Roswell found at $(which ros)"
          else
            echo "Roswell not found"
          fi

      - name: Run setup and tests
        run: |
          # Only run full setup if cache was not hit
          if command -v ros >/dev/null 2>&1; then
            echo "Cache hit, skipping Roswell installation"
          else
            echo "Cache miss, running full setup"
            make -f .github/workflows/Makefile setup
          fi
          make -f .github/workflows/Makefile test
